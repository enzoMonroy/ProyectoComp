package umg.compiladores;

import java_cup.runtime.*;

terminal PUNTO_Y_COMA, SUMA, RESTA, MULTIPLICACION, DIVISION, ASSIG, PARENTESIS_ABRE, PARENTESIS_CIERRA,
LLAVES_ABRE, LLAVES_CIERRA, IF, SWITCH, ELSE,CASE, DEFAULT,WHILE, DO,
MAYOR_Q, MAYORI_Q, MENOR_Q, MENORI_Q, IGUAL, DIFERENTE, AND, OR, NEGACION, NUMERO;

non terminal expr_list, expr;

precedence left PROGRMA;

start with programa;





Programa ::= Declaraciones Asignaciones
            | Estructura
            | estruc_for
            |estruc_while
            |estruc_dowhile
            |

Declaraciones::= declaracion declaraciones
            | 

declaracion::= ID ¨:¨ Tipo PUNTO_Y_COMA
            | 

Tipo::= ¨INT¨ 
        | ¨FLOAT¨
        | ¨DOUBLE¨
        | ¨STRING¨
        | ¨BOOLEAN

Asignaciones ::= Asignacion PUNTO_COMA Asignaciones
                |

Asignacion::= ID ASSIG expr

expr::= Literal
       | expr SUMA expr
       | expr RESTA expr 
       | expr MULTIPLICACION expr
       | expr DIVISION expr
       | PARENTESIS_ABRE expr PARENTESIS_CIERRA
       | LLAVES_ABRE expr LLAVES_CIERRA
       | 

Literal ::= INT_LITERAL
            | FLOAT_LITERAL
            | BOOL_LITERAL
            | STRING_LITERAL
            |

Relacional::= expr MAYOR_Q expr
            | expr MAYORI_Q expr 
            | expr MENOR_Q expr
            | expr MENORI_Q expr
            | expr IGUAL expr
            | expr DIFERENTE expr
            |

logico::= expr AND expr
            | expr OR expr 
            | NEGACION expr
            | NUMERO
            |

Estructura::= declaracion
            | declaracion_lista

Estruct_selectiva ::= estruc_if
                    | estruc_switch
                    |

estruct_if::= IF PARENTESIS_ABRE declaracion PARENTESIS_CIERRA LLAVE_ABRE declaracion_lista LLAVE_CIERRA
            | IF PARENTESIS_ABRE declaracion PARENTESIS_CIERRA LLAVE_ABRE declaracion_lista LLAVE_CIERRA ELSE LLAVE_ABRE declaracion_lista LLAVE_CIERRA
;

estruc_switch::= SWITCH PARENTESIS_ABRE expr PARENTESIS_CIERRA LLAVE_ABRE Estruc_caso_lista LLAVE_CIERRA;

Estruc_caso_lista::=Estruc_caso
                    | Estruc_caso_lista Estruc_caso;

Estruc_caso::= CASE declaracion declarion_lista;

default_caso::= DEFAULT declarion_lista;
;

estruc_for ::= FOR PARENTESIS_ABRE expr PUNTO_COMA expr PUNTO_COMA expr PARENTESIS_CIERRA LLAVE_ABRE expr LLAVE_CIERRA
;

estruc_while::=expr PUNTO_COMA
                estruc_while;

estruc_while::= WHILE PARENTESIS_ABRE expr PARENTESIS_CIERRA estruc_while
;

estruc_dowhile::=declaracion_dowhile PUNTO_COMA
                estruc_while;

declaracion_dowhile::=DO LLAVE_ABRE estruc_dowhile LLAVE_CIERRA WHILE PARENTESIS_ABRE expr PARENTESIS_CIERRA
; 